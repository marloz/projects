{
  
    
        "post0": {
            "title": "Data overview",
            "content": "# pandas and numpy for data manipulation import pandas as pd import numpy as np # featuretools for automated feature engineering # !pip install featuretools --upgrade import featuretools as ft # matplotlit and seaborn for visualizations import matplotlib.pyplot as plt import pylab pylab.rcParams[&#39;figure.figsize&#39;] = (15, 8) pylab.rcParams[&#39;font.size&#39;] = 10 import seaborn as sns # Suppress warnings from pandas import warnings warnings.filterwarnings(&#39;ignore&#39;) . This notebook explores featuretools library for automated feature engineering. I will use Kaggle&#39;s home credit default risk dataset, which has just the right structure for this task. Thanks to Will Koehrsen for awesome walkthroughs and explanations of this package. . . Application data . # Utility to quickly inspect data def inspect_df(df, target_col=None): print(f&#39;df shape: {df.shape}&#39;) print(&#39;_____________________&#39;) print(f&#39;datatypes: {df.dtypes.value_counts()}&#39;) print(&#39;_____________________&#39;) print(f&#39;Num null vals: {df.isnull().sum().sum()}&#39;) print(&#39;_____________________&#39;) if target_col is not None: print(f&#39;{target_col} classes: n{df[target_col].value_counts()}&#39;) print(&#39;_____________________&#39;) return df.head() . Application data is of considerable size both in terms of rows and columns, has mixed data types, some missing values and inbalanced target classes. Since automated feature generation is quite resource intensive process, we need to downsample, preprocess and reduce dimensionality before creating more features. . app_df = pd.read_csv(&#39;../input/home-credit-default-risk/application_train.csv&#39;) inspect_df(app_df, target_col=&#39;TARGET&#39;) . df shape: (307511, 122) _____________________ datatypes: float64 65 int64 41 object 16 dtype: int64 _____________________ Num null vals: 9152465 _____________________ TARGET classes: 0 282686 1 24825 Name: TARGET, dtype: int64 _____________________ . SK_ID_CURR TARGET NAME_CONTRACT_TYPE CODE_GENDER FLAG_OWN_CAR FLAG_OWN_REALTY CNT_CHILDREN AMT_INCOME_TOTAL AMT_CREDIT AMT_ANNUITY ... FLAG_DOCUMENT_18 FLAG_DOCUMENT_19 FLAG_DOCUMENT_20 FLAG_DOCUMENT_21 AMT_REQ_CREDIT_BUREAU_HOUR AMT_REQ_CREDIT_BUREAU_DAY AMT_REQ_CREDIT_BUREAU_WEEK AMT_REQ_CREDIT_BUREAU_MON AMT_REQ_CREDIT_BUREAU_QRT AMT_REQ_CREDIT_BUREAU_YEAR . 0 100002 | 1 | Cash loans | M | N | Y | 0 | 202500.0 | 406597.5 | 24700.5 | ... | 0 | 0 | 0 | 0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 1.0 | . 1 100003 | 0 | Cash loans | F | N | N | 0 | 270000.0 | 1293502.5 | 35698.5 | ... | 0 | 0 | 0 | 0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 2 100004 | 0 | Revolving loans | M | Y | Y | 0 | 67500.0 | 135000.0 | 6750.0 | ... | 0 | 0 | 0 | 0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 3 100006 | 0 | Cash loans | F | N | Y | 0 | 135000.0 | 312682.5 | 29686.5 | ... | 0 | 0 | 0 | 0 | NaN | NaN | NaN | NaN | NaN | NaN | . 4 100007 | 0 | Cash loans | M | N | Y | 0 | 121500.0 | 513000.0 | 21865.5 | ... | 0 | 0 | 0 | 0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 5 rows × 122 columns . Balance target classes . # Downsample majority class to have same number of rows as minority class def balance_target(df, target_col, positive_class=1, random_state=42): positive_idx = df[df[target_col] == positive_class].index negative_idx = (df.loc[~df.index.isin(positive_idx)] .sample(len(positive_idx), replace=False, random_state=random_state)).index return df.loc[positive_idx.union(negative_idx)] . # Reduction from 300k rows to 50k should speed up exploration and since classes are balanced, shouldn&#39;t affect the accuracy too much. app_df_sample = balance_target(app_df, target_col=&#39;TARGET&#39;) app_df_sample.TARGET.value_counts() . 1 24825 0 24825 Name: TARGET, dtype: int64 . Preprocessing . # Splitter into features and target def split_x_y(df, target_col): return df.drop(target_col, axis=1), df[target_col] . Create a data preparator that: . separates id columns | splits features into categorical and numerical | fills in missing values | factorizes categories (numerical encoding) | reduces float precision of numericals for faster processing | adds random features as benchmark for feature selection later | . class DataPreparator: def __init__(self, id_cols, add_rand_cols=False): self.id_cols = id_cols self.add_rand_cols = add_rand_cols np.random.seed(42) def prepare_data(self, X, cat_fill_val=&#39;none&#39;, cat_trans_func=lambda x: pd.factorize(x)[0], cat_rand_func=lambda x: np.random.choice([0, 1], x.shape[0]), num_fill_val=0, num_trans_func=lambda x: x.astype(&#39;float32&#39;), num_rand_func=lambda x: np.random.rand(x.shape[0])): ids, X = X[self.id_cols], X.drop(self.id_cols, axis=1) X_cat = self._preprocess(X, &#39;object&#39;, cat_fill_val, cat_trans_func, cat_rand_func) X_num = self._preprocess(X, &#39;number&#39;, num_fill_val, num_trans_func, num_rand_func) return pd.concat([ids, X_cat, X_num], axis=1) def _preprocess(self, X, dtypes, fill_val, trans_func, rand_func): X_proc = (X.select_dtypes(include=dtypes) .fillna(fill_val) .apply(trans_func)) if X_proc.shape[0] &gt; 0: return X_proc.assign(**{f&#39;rand_{dtypes}&#39;: rand_func}) if self.add_rand_cols else X_proc . app_df_feat, y = split_x_y(app_df_sample, target_col=&#39;TARGET&#39;) app_df_proc = DataPreparator(id_cols=[&#39;SK_ID_CURR&#39;], add_rand_cols=True).prepare_data(app_df_feat) inspect_df(app_df_proc) . df shape: (49650, 123) _____________________ datatypes: float32 104 int64 18 float64 1 dtype: int64 _____________________ Num null vals: 0 _____________________ _____________________ . SK_ID_CURR NAME_CONTRACT_TYPE CODE_GENDER FLAG_OWN_CAR FLAG_OWN_REALTY NAME_TYPE_SUITE NAME_INCOME_TYPE NAME_EDUCATION_TYPE NAME_FAMILY_STATUS NAME_HOUSING_TYPE ... FLAG_DOCUMENT_19 FLAG_DOCUMENT_20 FLAG_DOCUMENT_21 AMT_REQ_CREDIT_BUREAU_HOUR AMT_REQ_CREDIT_BUREAU_DAY AMT_REQ_CREDIT_BUREAU_WEEK AMT_REQ_CREDIT_BUREAU_MON AMT_REQ_CREDIT_BUREAU_QRT AMT_REQ_CREDIT_BUREAU_YEAR rand_number . 0 100002 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 1.0 | 0.319204 | . 7 100010 | 0 | 0 | 1 | 0 | 0 | 1 | 1 | 1 | 0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.431163 | . 13 100017 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 1.0 | 0.052360 | . 17 100021 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.992538 | . 25 100030 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.507610 | . 5 rows × 123 columns . Inspection shows that no rows are lost, all missing values are filled and all columns are numeric . Reduce number of features . The idea here is to fit simple model with in-built feature importances (Random Forest) and drop all columns that have lower significance than random columns added in preparation step. . from sklearn.ensemble import RandomForestClassifier class FeatureSelector: def __init__(self, X, y, id_cols, rand_cols): self.X = X self.y = y self.id_cols = id_cols self.rand_cols = rand_cols def select_important_features(self): rf = RandomForestClassifier(n_estimators=100, oob_score=True, n_jobs=-1, random_state=42) rf.fit(self.X, self.y) print(f&#39;Model score with full feature set {rf.oob_score_}&#39;) important_cols = self.get_important_cols(rf, self.X.columns) rf.fit(self.X[important_cols], self.y) print(f&#39;Model score with reduced feature set {rf.oob_score_}&#39;) return self.X[self.id_cols + important_cols] def get_important_cols(self, model, column_names): importances = pd.Series(model.feature_importances_, index=column_names) rand_importance = np.max(importances.loc[importances.index.isin(self.rand_cols)]) important_cols = importances[importances &gt; rand_importance].index.tolist() print(f&#39;Number of features with greater than random column importance {len(important_cols)}&#39;) importances.sort_values().plot(title=&#39;feature importance&#39;) return important_cols . app_df_reduced = FeatureSelector(app_df_proc, y, id_cols=[&#39;SK_ID_CURR&#39;], rand_cols=[&#39;rand_object&#39;, &#39;rand_number&#39;]).select_important_features() inspect_df(app_df_reduced) . Model score with full feature set 0.6591742195367573 Number of features with greater than random column importance 9 Model score with reduced feature set 0.655730110775428 df shape: (49650, 10) _____________________ datatypes: float32 9 int64 1 dtype: int64 _____________________ Num null vals: 0 _____________________ _____________________ . SK_ID_CURR AMT_ANNUITY DAYS_BIRTH DAYS_EMPLOYED DAYS_REGISTRATION DAYS_ID_PUBLISH EXT_SOURCE_1 EXT_SOURCE_2 EXT_SOURCE_3 DAYS_LAST_PHONE_CHANGE . 0 100002 | 24700.5 | -9461.0 | -637.0 | -3648.0 | -2120.0 | 0.083037 | 0.262949 | 0.139376 | -1134.0 | . 7 100010 | 42075.0 | -18850.0 | -449.0 | -4597.0 | -2379.0 | 0.000000 | 0.714279 | 0.540654 | -1070.0 | . 13 100017 | 28966.5 | -14086.0 | -3028.0 | -643.0 | -4911.0 | 0.000000 | 0.566907 | 0.770087 | -4.0 | . 17 100021 | 13500.0 | -9776.0 | -191.0 | -4143.0 | -2427.0 | 0.000000 | 0.683513 | 0.000000 | -2811.0 | . 25 100030 | 11074.5 | -19334.0 | -3494.0 | -2419.0 | -2893.0 | 0.561948 | 0.651406 | 0.461482 | 0.0 | . Neat! We reduced number of features from 122 down to 9 (not counting ID), while model score changed only slightly. . Bureau data . Will need to perform downsampling and preprocessing for other dataframes involved as well. The key is to select only rows that link main dataframe on SK_ID_CURR column. . def sample_from_parent_df(parent_df, id_col, child_df): sample_ids = parent_df.set_index(id_col).index child_df = (child_df.set_index(id_col) .apply(lambda x: x.loc[x.index.isin(sample_ids)]) .reset_index()) print(f&#39;Num ids in parent df: {len(sample_ids)}, &#39; f&#39;num ids in child df: {child_df[id_col].nunique()}&#39;) return child_df . bureau_df = sample_from_parent_df(parent_df=app_df_reduced, id_col=&#39;SK_ID_CURR&#39;, child_df=pd.read_csv(&#39;../input/home-credit-default-risk/bureau.csv&#39;)) inspect_df(bureau_df) . Num ids in parent df: 49650, num ids in child df: 41689 df shape: (232611, 17) _____________________ datatypes: float64 8 int64 6 object 3 dtype: int64 _____________________ Num null vals: 549613 _____________________ _____________________ . SK_ID_CURR SK_ID_BUREAU CREDIT_ACTIVE CREDIT_CURRENCY DAYS_CREDIT CREDIT_DAY_OVERDUE DAYS_CREDIT_ENDDATE DAYS_ENDDATE_FACT AMT_CREDIT_MAX_OVERDUE CNT_CREDIT_PROLONG AMT_CREDIT_SUM AMT_CREDIT_SUM_DEBT AMT_CREDIT_SUM_LIMIT AMT_CREDIT_SUM_OVERDUE CREDIT_TYPE DAYS_CREDIT_UPDATE AMT_ANNUITY . 0 162297 | 5714469 | Closed | currency 1 | -1896 | 0 | -1684.0 | -1710.0 | 14985.0 | 0 | 76878.45 | 0.0 | 0.0 | 0.0 | Consumer credit | -1710 | NaN | . 1 162297 | 5714470 | Closed | currency 1 | -1146 | 0 | -811.0 | -840.0 | 0.0 | 0 | 103007.70 | 0.0 | 0.0 | 0.0 | Consumer credit | -840 | NaN | . 2 162297 | 5714471 | Active | currency 1 | -1146 | 0 | -484.0 | NaN | 0.0 | 0 | 4500.00 | 0.0 | 0.0 | 0.0 | Credit card | -690 | NaN | . 3 162297 | 5714472 | Active | currency 1 | -1146 | 0 | -180.0 | NaN | 0.0 | 0 | 337500.00 | 0.0 | 0.0 | 0.0 | Credit card | -690 | NaN | . 4 162297 | 5714473 | Closed | currency 1 | -2456 | 0 | -629.0 | -825.0 | NaN | 0 | 675000.00 | 0.0 | 0.0 | 0.0 | Consumer credit | -706 | NaN | . Since this table has higher granularity, we cannot perform feature reduction in the same way like we did with application data and it has just 17 columns anyway, also there&#39;s no need to add random features when processing. . bureau_df_proc = DataPreparator(id_cols=[&#39;SK_ID_CURR&#39;, &#39;SK_ID_BUREAU&#39;]).prepare_data(bureau_df) inspect_df(bureau_df_proc) . df shape: (232611, 17) _____________________ datatypes: float32 12 int64 5 dtype: int64 _____________________ Num null vals: 0 _____________________ _____________________ . SK_ID_CURR SK_ID_BUREAU CREDIT_ACTIVE CREDIT_CURRENCY CREDIT_TYPE DAYS_CREDIT CREDIT_DAY_OVERDUE DAYS_CREDIT_ENDDATE DAYS_ENDDATE_FACT AMT_CREDIT_MAX_OVERDUE CNT_CREDIT_PROLONG AMT_CREDIT_SUM AMT_CREDIT_SUM_DEBT AMT_CREDIT_SUM_LIMIT AMT_CREDIT_SUM_OVERDUE DAYS_CREDIT_UPDATE AMT_ANNUITY . 0 162297 | 5714469 | 0 | 0 | 0 | -1896.0 | 0.0 | -1684.0 | -1710.0 | 14985.0 | 0.0 | 76878.453125 | 0.0 | 0.0 | 0.0 | -1710.0 | 0.0 | . 1 162297 | 5714470 | 0 | 0 | 0 | -1146.0 | 0.0 | -811.0 | -840.0 | 0.0 | 0.0 | 103007.703125 | 0.0 | 0.0 | 0.0 | -840.0 | 0.0 | . 2 162297 | 5714471 | 1 | 0 | 1 | -1146.0 | 0.0 | -484.0 | 0.0 | 0.0 | 0.0 | 4500.000000 | 0.0 | 0.0 | 0.0 | -690.0 | 0.0 | . 3 162297 | 5714472 | 1 | 0 | 1 | -1146.0 | 0.0 | -180.0 | 0.0 | 0.0 | 0.0 | 337500.000000 | 0.0 | 0.0 | 0.0 | -690.0 | 0.0 | . 4 162297 | 5714473 | 0 | 0 | 0 | -2456.0 | 0.0 | -629.0 | -825.0 | 0.0 | 0.0 | 675000.000000 | 0.0 | 0.0 | 0.0 | -706.0 | 0.0 | . Bureau balance data . bureau_bal_df = sample_from_parent_df(parent_df=bureau_df_proc, id_col=&#39;SK_ID_BUREAU&#39;, child_df=pd.read_csv(&#39;../input/home-credit-default-risk/bureau_balance.csv&#39;)) inspect_df(bureau_bal_df) . Num ids in parent df: 232611, num ids in child df: 85663 df shape: (2224269, 3) _____________________ datatypes: int64 2 object 1 dtype: int64 _____________________ Num null vals: 0 _____________________ _____________________ . SK_ID_BUREAU MONTHS_BALANCE STATUS . 0 5715565 | 0 | X | . 1 5715565 | -1 | 0 | . 2 5715565 | -2 | 0 | . 3 5715565 | -3 | X | . 4 5715565 | -4 | 0 | . bureau_bal_df_proc = DataPreparator(id_cols=[&#39;SK_ID_BUREAU&#39;]).prepare_data(bureau_bal_df) inspect_df(bureau_bal_df_proc) . df shape: (2224269, 3) _____________________ datatypes: int64 2 float32 1 dtype: int64 _____________________ Num null vals: 0 _____________________ _____________________ . SK_ID_BUREAU STATUS MONTHS_BALANCE . 0 5715565 | 0 | 0.0 | . 1 5715565 | 1 | -1.0 | . 2 5715565 | 1 | -2.0 | . 3 5715565 | 0 | -3.0 | . 4 5715565 | 1 | -4.0 | . Feature engineering . Ok, now that data is ready, let&#39;s see what featuretools have to offer. . Create entity set . First we need to create entity set - list all dataframes and their ids. We&#39;ll create an index for bureau balance data because it doesn&#39;t have one and it is required by featuretools. There&#39;s an inbuilt plotting function to check entity set before proceeding. . es = ft.EntitySet(id=&#39;credit_data&#39;) es = es.entity_from_dataframe(entity_id=&#39;applications&#39;, dataframe=app_df_reduced, index=&#39;SK_ID_CURR&#39;) es = es.entity_from_dataframe(entity_id=&#39;bureau&#39;, dataframe=bureau_df_proc, index=&#39;SK_ID_BUREAU&#39;) es = es.entity_from_dataframe(entity_id=&#39;bureau_balance&#39;, dataframe=bureau_bal_df_proc, index=&#39;SK_ID_BUREAU_BAL&#39;, make_index=True) es.plot() . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; credit_data applications applications (49650 rows) SK_ID_CURR : index AMT_ANNUITY : numeric DAYS_BIRTH : numeric DAYS_EMPLOYED : numeric DAYS_REGISTRATION : numeric DAYS_ID_PUBLISH : numeric EXT_SOURCE_1 : numeric EXT_SOURCE_2 : numeric EXT_SOURCE_3 : numeric DAYS_LAST_PHONE_CHANGE : numeric bureau bureau (232611 rows) SK_ID_BUREAU : index SK_ID_CURR : numeric CREDIT_ACTIVE : numeric CREDIT_CURRENCY : numeric CREDIT_TYPE : numeric DAYS_CREDIT : numeric CREDIT_DAY_OVERDUE : numeric DAYS_CREDIT_ENDDATE : numeric DAYS_ENDDATE_FACT : numeric AMT_CREDIT_MAX_OVERDUE : numeric CNT_CREDIT_PROLONG : numeric AMT_CREDIT_SUM : numeric AMT_CREDIT_SUM_DEBT : numeric AMT_CREDIT_SUM_LIMIT : numeric AMT_CREDIT_SUM_OVERDUE : numeric DAYS_CREDIT_UPDATE : numeric AMT_ANNUITY : numeric bureau_balance bureau_balance (2224269 rows) SK_ID_BUREAU_BAL : index SK_ID_BUREAU : numeric STATUS : numeric MONTHS_BALANCE : numeric Create relationships . Once we have our entity set, we need to establish relationships between entities (tables/dataframes). As it was shown (see diagram in the beginning of the notebook) application data is the main table, which links to bureau data via SK_ID_CURR column. Each SK_ID_CURR can have multiple records in bureau table, which has SK_ID_BUREAU unique identifier that subsequently links to records in bureau_balance table. . rel_app_bureau = ft.Relationship(parent_variable=es[&#39;applications&#39;][&#39;SK_ID_CURR&#39;], child_variable=es[&#39;bureau&#39;][&#39;SK_ID_CURR&#39;]) rel_bureau_bal = ft.Relationship(parent_variable=es[&#39;bureau&#39;][&#39;SK_ID_BUREAU&#39;], child_variable=es[&#39;bureau_balance&#39;][&#39;SK_ID_BUREAU&#39;]) es = es.add_relationships([rel_app_bureau, rel_bureau_bal]) es.plot() . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; credit_data applications applications (49650 rows) SK_ID_CURR : index AMT_ANNUITY : numeric DAYS_BIRTH : numeric DAYS_EMPLOYED : numeric DAYS_REGISTRATION : numeric DAYS_ID_PUBLISH : numeric EXT_SOURCE_1 : numeric EXT_SOURCE_2 : numeric EXT_SOURCE_3 : numeric DAYS_LAST_PHONE_CHANGE : numeric bureau bureau (232611 rows) SK_ID_BUREAU : index SK_ID_CURR : id CREDIT_ACTIVE : numeric CREDIT_CURRENCY : numeric CREDIT_TYPE : numeric DAYS_CREDIT : numeric CREDIT_DAY_OVERDUE : numeric DAYS_CREDIT_ENDDATE : numeric DAYS_ENDDATE_FACT : numeric AMT_CREDIT_MAX_OVERDUE : numeric CNT_CREDIT_PROLONG : numeric AMT_CREDIT_SUM : numeric AMT_CREDIT_SUM_DEBT : numeric AMT_CREDIT_SUM_LIMIT : numeric AMT_CREDIT_SUM_OVERDUE : numeric DAYS_CREDIT_UPDATE : numeric AMT_ANNUITY : numeric bureau&#45;&gt;applications SK_ID_CURR bureau_balance bureau_balance (2224269 rows) SK_ID_BUREAU_BAL : index SK_ID_BUREAU : id STATUS : numeric MONTHS_BALANCE : numeric bureau_balance&#45;&gt;bureau SK_ID_BUREAU Create features . Automating feature creation is as simple as calling a on-liner with established entity set and pointing to a dataframe, where features should be added. Depending on data size, entity set complexity, chosen primitives, transforms and depth (see more on https://featuretools.alteryx.com/en/stable/getting_started/afe.html) this might take a while to run. . feat_mat, feat_def = ft.dfs(entityset=es, target_entity=&#39;applications&#39;, n_jobs=-1, max_depth=2) . EntitySet scattered to 4 workers in 10 seconds . inspect_df(feat_mat) . df shape: (49650, 272) _____________________ datatypes: float32 155 float64 117 dtype: int64 _____________________ Num null vals: 5567429 _____________________ _____________________ . AMT_ANNUITY DAYS_BIRTH DAYS_EMPLOYED DAYS_REGISTRATION DAYS_ID_PUBLISH EXT_SOURCE_1 EXT_SOURCE_2 EXT_SOURCE_3 DAYS_LAST_PHONE_CHANGE COUNT(bureau) ... SUM(bureau_balance.bureau.AMT_CREDIT_SUM_OVERDUE) SUM(bureau_balance.bureau.CNT_CREDIT_PROLONG) SUM(bureau_balance.bureau.CREDIT_ACTIVE) SUM(bureau_balance.bureau.CREDIT_CURRENCY) SUM(bureau_balance.bureau.CREDIT_DAY_OVERDUE) SUM(bureau_balance.bureau.CREDIT_TYPE) SUM(bureau_balance.bureau.DAYS_CREDIT) SUM(bureau_balance.bureau.DAYS_CREDIT_ENDDATE) SUM(bureau_balance.bureau.DAYS_CREDIT_UPDATE) SUM(bureau_balance.bureau.DAYS_ENDDATE_FACT) . SK_ID_CURR . 100002 24700.5 | -9461.0 | -637.0 | -3648.0 | -2120.0 | 0.083037 | 0.262949 | 0.139376 | -1134.0 | 8.0 | ... | 0.0 | 0.0 | 20.0 | 0.0 | 0.0 | 58.0 | -109646.0 | -40752.0 | -69516.0 | -72756.0 | . 100010 42075.0 | -18850.0 | -449.0 | -4597.0 | -2379.0 | 0.000000 | 0.714279 | 0.540654 | -1070.0 | 2.0 | ... | 0.0 | 0.0 | 36.0 | 0.0 | 0.0 | 180.0 | -139644.0 | -8604.0 | -41616.0 | -40968.0 | . 100017 28966.5 | -14086.0 | -3028.0 | -643.0 | -4911.0 | 0.000000 | 0.566907 | 0.770087 | -4.0 | 6.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 100021 13500.0 | -9776.0 | -191.0 | -4143.0 | -2427.0 | 0.000000 | 0.683513 | 0.000000 | -2811.0 | 0.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 100030 11074.5 | -19334.0 | -3494.0 | -2419.0 | -2893.0 | 0.561948 | 0.651406 | 0.461482 | 0.0 | 6.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 5 rows × 272 columns . Featuretools created more than 200 features out of our entity set with default primitive and transform configurations, of course not all of them make sense or add signal, so we have to perform selection again. . Modeling . Just to see if this tool added some benefit, we&#39;ll run already introduced feature selection and see if we improved the score of benchmark model. . Benchmark model . feat_mat.head().reset_index() . SK_ID_CURR AMT_ANNUITY DAYS_BIRTH DAYS_EMPLOYED DAYS_REGISTRATION DAYS_ID_PUBLISH EXT_SOURCE_1 EXT_SOURCE_2 EXT_SOURCE_3 DAYS_LAST_PHONE_CHANGE ... SUM(bureau_balance.bureau.AMT_CREDIT_SUM_OVERDUE) SUM(bureau_balance.bureau.CNT_CREDIT_PROLONG) SUM(bureau_balance.bureau.CREDIT_ACTIVE) SUM(bureau_balance.bureau.CREDIT_CURRENCY) SUM(bureau_balance.bureau.CREDIT_DAY_OVERDUE) SUM(bureau_balance.bureau.CREDIT_TYPE) SUM(bureau_balance.bureau.DAYS_CREDIT) SUM(bureau_balance.bureau.DAYS_CREDIT_ENDDATE) SUM(bureau_balance.bureau.DAYS_CREDIT_UPDATE) SUM(bureau_balance.bureau.DAYS_ENDDATE_FACT) . 0 100002 | 24700.5 | -9461.0 | -637.0 | -3648.0 | -2120.0 | 0.083037 | 0.262949 | 0.139376 | -1134.0 | ... | 0.0 | 0.0 | 20.0 | 0.0 | 0.0 | 58.0 | -109646.0 | -40752.0 | -69516.0 | -72756.0 | . 1 100010 | 42075.0 | -18850.0 | -449.0 | -4597.0 | -2379.0 | 0.000000 | 0.714279 | 0.540654 | -1070.0 | ... | 0.0 | 0.0 | 36.0 | 0.0 | 0.0 | 180.0 | -139644.0 | -8604.0 | -41616.0 | -40968.0 | . 2 100017 | 28966.5 | -14086.0 | -3028.0 | -643.0 | -4911.0 | 0.000000 | 0.566907 | 0.770087 | -4.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 3 100021 | 13500.0 | -9776.0 | -191.0 | -4143.0 | -2427.0 | 0.000000 | 0.683513 | 0.000000 | -2811.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 4 100030 | 11074.5 | -19334.0 | -3494.0 | -2419.0 | -2893.0 | 0.561948 | 0.651406 | 0.461482 | 0.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 5 rows × 273 columns . feat_mat_proc = DataPreparator(id_cols=[&#39;SK_ID_CURR&#39;], add_rand_cols=True).prepare_data(feat_mat.reset_index()) inspect_df(feat_mat_proc) . df shape: (49650, 274) _____________________ datatypes: float32 272 int64 1 float64 1 dtype: int64 _____________________ Num null vals: 0 _____________________ _____________________ . SK_ID_CURR AMT_ANNUITY DAYS_BIRTH DAYS_EMPLOYED DAYS_REGISTRATION DAYS_ID_PUBLISH EXT_SOURCE_1 EXT_SOURCE_2 EXT_SOURCE_3 DAYS_LAST_PHONE_CHANGE ... SUM(bureau_balance.bureau.CNT_CREDIT_PROLONG) SUM(bureau_balance.bureau.CREDIT_ACTIVE) SUM(bureau_balance.bureau.CREDIT_CURRENCY) SUM(bureau_balance.bureau.CREDIT_DAY_OVERDUE) SUM(bureau_balance.bureau.CREDIT_TYPE) SUM(bureau_balance.bureau.DAYS_CREDIT) SUM(bureau_balance.bureau.DAYS_CREDIT_ENDDATE) SUM(bureau_balance.bureau.DAYS_CREDIT_UPDATE) SUM(bureau_balance.bureau.DAYS_ENDDATE_FACT) rand_number . 0 100002 | 24700.5 | -9461.0 | -637.0 | -3648.0 | -2120.0 | 0.083037 | 0.262949 | 0.139376 | -1134.0 | ... | 0.0 | 20.0 | 0.0 | 0.0 | 58.0 | -109646.0 | -40752.0 | -69516.0 | -72756.0 | 0.374540 | . 1 100010 | 42075.0 | -18850.0 | -449.0 | -4597.0 | -2379.0 | 0.000000 | 0.714279 | 0.540654 | -1070.0 | ... | 0.0 | 36.0 | 0.0 | 0.0 | 180.0 | -139644.0 | -8604.0 | -41616.0 | -40968.0 | 0.950714 | . 2 100017 | 28966.5 | -14086.0 | -3028.0 | -643.0 | -4911.0 | 0.000000 | 0.566907 | 0.770087 | -4.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.731994 | . 3 100021 | 13500.0 | -9776.0 | -191.0 | -4143.0 | -2427.0 | 0.000000 | 0.683513 | 0.000000 | -2811.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.598658 | . 4 100030 | 11074.5 | -19334.0 | -3494.0 | -2419.0 | -2893.0 | 0.561948 | 0.651406 | 0.461482 | 0.0 | ... | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.156019 | . 5 rows × 274 columns . feat_mat_imp = FeatureSelector(feat_mat_proc, y, id_cols=[&#39;SK_ID_CURR&#39;], rand_cols=[&#39;rand_object&#39;, &#39;rand_number&#39;]).select_important_features() . Model score with full feature set 0.6526888217522658 Number of features with greater than random column importance 8 Model score with reduced feature set 0.6556294058408862 . Conclusion . Added features didn&#39;t seem to improve the score pre and post selection by importance. This of course does not mean that the tool is useless, because most of the time feature engineering is just adding the same basic primitives and transforms - counts, sums, means, etc. Remember, we have not considered all tables available in the data, perhaps they contain more signal. Also, featuretools were run with default presets, which could be tinkered with, so definitely looks like something to add in the toolset, to inrease productivity, especially when building PoCs. .",
            "url": "https://marloz.github.io/projects/2020/11/06/featuretools-exploration.html",
            "relUrl": "/2020/11/06/featuretools-exploration.html",
            "date": " • Nov 6, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Dimensionality reduction and feature selection",
            "content": "Feature selection . The purpose of this post is to explore feature selection techniques, namely: . * Correlation based * K-best * In-built features importance of Random Forest * Permutation importances . Data exploration . The dataset is taken from Kaggle: https://www.kaggle.com/c/santander-customer-transaction-prediction . Load and inspect data, check dimensions, data types, missing values, target variable . import pandas as pd import numpy as np . df_train = pd.read_csv(&#39;../input/train.csv&#39;) print(df_train.shape) df_train.head() . (200000, 202) . ID_code target var_0 var_1 var_2 var_3 var_4 var_5 var_6 var_7 ... var_190 var_191 var_192 var_193 var_194 var_195 var_196 var_197 var_198 var_199 . 0 train_0 | 0 | 8.9255 | -6.7863 | 11.9081 | 5.0930 | 11.4607 | -9.2834 | 5.1187 | 18.6266 | ... | 4.4354 | 3.9642 | 3.1364 | 1.6910 | 18.5227 | -2.3978 | 7.8784 | 8.5635 | 12.7803 | -1.0914 | . 1 train_1 | 0 | 11.5006 | -4.1473 | 13.8588 | 5.3890 | 12.3622 | 7.0433 | 5.6208 | 16.5338 | ... | 7.6421 | 7.7214 | 2.5837 | 10.9516 | 15.4305 | 2.0339 | 8.1267 | 8.7889 | 18.3560 | 1.9518 | . 2 train_2 | 0 | 8.6093 | -2.7457 | 12.0805 | 7.8928 | 10.5825 | -9.0837 | 6.9427 | 14.6155 | ... | 2.9057 | 9.7905 | 1.6704 | 1.6858 | 21.6042 | 3.1417 | -6.5213 | 8.2675 | 14.7222 | 0.3965 | . 3 train_3 | 0 | 11.0604 | -2.1518 | 8.9522 | 7.1957 | 12.5846 | -1.8361 | 5.8428 | 14.9250 | ... | 4.4666 | 4.7433 | 0.7178 | 1.4214 | 23.0347 | -1.2706 | -2.9275 | 10.2922 | 17.9697 | -8.9996 | . 4 train_4 | 0 | 9.8369 | -1.4834 | 12.8746 | 6.6375 | 12.2772 | 2.4486 | 5.9405 | 19.2514 | ... | -1.4905 | 9.5214 | -0.1508 | 9.1942 | 13.2876 | -1.5121 | 3.9267 | 9.5031 | 17.9974 | -8.8104 | . 5 rows × 202 columns . def check_missing(df): return df.isnull().sum().sum() print(f&#39;Missing values {check_missing(df_train)}&#39;) . Missing values 0 . df_train.dtypes.value_counts() . float64 200 object 1 int64 1 dtype: int64 . df_train.target.sum() / df_train.shape[0] . 0.10049 . Quite large dataset with 200 numerical features, no missing values and all variable names anonymyzed, target class is inbalanced. . Sampling . In real life scenarios we would want to keep as much information as possible, given resource constraints and probably use model weights instead of downsampling. However, for the purpose of this post, let&#39;s downsample majority class to achieve 1:1 ratio, which will both speed up exploration and simplify accuracy measurement. . # Drop ID column as it doesn&#39;t contain information df_train.drop(&#39;ID_code&#39;, axis=1, inplace=True) . df_positive_class = df_train[df_train.target == 1] df_negative_class = df_train[df_train.target == 0].sample(df_positive_class.shape[0], replace=False, random_state=42) sample_df = pd.concat([df_positive_class, df_negative_class], axis=0) sample_df.target.value_counts() . 1 20098 0 20098 Name: target, dtype: int64 . Separate X and y, add random feature for importance reference, change dtypes to float32 to speedup processing . np.random.seed(42) X = (sample_df.drop(&#39;target&#39;, axis=1) .apply(lambda x: x.astype(&#39;float32&#39;)) .assign(rand=lambda x: np.random.rand(x.shape[0]))) y = sample_df.target . Create train test splits . from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.2, random_state=42) . The benchmark . Typical framework for such experiments is building the simplest solution first and then trying different techniques to improve it. Let&#39;s use the usual Random Forest classifier, which is the go-to choice for prototyping, idea testing and experimentation. We&#39;ll fit it on all features to get the benchmark and then try to reduce the number of features while maintaining as high accuracy as possible. Besides accuracy score, let&#39;s keep track of prediction time - a pretend scenario for when real time speed is important, this will add more motivation for dimensionality reduction. Remember, simple = good :) . import time def score_and_time(model, X): ts = time.time() preds = model.predict(X) elapsed = int((time.time() - ts) * 1000) print(f&#39;Score {model.oob_score_}, predicted in {elapsed}&#39;) . from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import confusion_matrix baseline = RandomForestClassifier(n_estimators=100, oob_score=True, n_jobs=-1, random_state=42) baseline.fit(X_train, y_train) score_and_time(baseline, X_test) . Score 0.7065244433387238, predicted in 209 . In-built feature importance . Random Forest was chosen for another nice property - it has in-built feature importance feature after fitting it, which saves considerable amount of coding. Let&#39;s use already fitted benchmark to get the important features. . importances = pd.Series(baseline.feature_importances_, index=X_train.columns) important_cols = importances[importances &gt; importances[&#39;rand&#39;]].index.tolist() print(f&#39;Number of features with greater than random column importance {len(important_cols)}&#39;) importances.sort_values().plot() . Number of features with greater than random column importance 178 . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f11ad0854a8&gt; . reduced_rf = RandomForestClassifier(n_estimators=100, oob_score=True, n_jobs=-1, random_state=42) reduced_rf.fit(X_train[important_cols], y_train) score_and_time(reduced_rf, X_test[important_cols]) . Score 0.7095720860803583, predicted in 205 . Ok, so we improved the score somewhat, prediction time is similar, dimensionality is still quite high, around 2/3 of the original input. Of course, if this was the issue, we could try sacrificing some of the accuracy and choosing less top features, instead of taking all non-random. Also, importance plot shows exponential decay, so 20/80 principle is applicable here and shouldn&#39;t hurt accuracy too much. . Importance based on correlation to target . Another way to perform variable selection that is more traditional and related to linear models is by picking features that are most correlated to target variable. Since most of the relationships in real world are not linear, we&#39;ll use Spearman&#39;s rank correlation instead of Pearson&#39;s correlation, because it&#39;s more robust and better captures non-linearities. Also, even though pandas has in-built correlation method, let&#39;s use scipy&#39;s implementation, since it&#39;s more efficient. . Some practitioners suggest investigating relationships between features first, because multicollinearity has an effect on importances, i.e. correlated variables will both seem important but contain nearly identical information. But let&#39;s leave it for now, because it would unnecessarily complicate implementation if we wanted to automate this process. . import scipy.stats _ = pd.concat([X_train,y_train], axis=1) cor = pd.DataFrame(np.abs(scipy.stats.spearmanr(_).correlation), columns=_.columns, index=_.columns)[&#39;target&#39;] non_rand_corr = cor[cor &gt; cor[&#39;rand&#39;]].shape[0] print(f&#39;Number of variables with correlation to target higher than random {non_rand_corr}&#39;) cor[cor.index != &#39;target&#39;].sort_values().plot() . Number of variables with correlation to target higher than random 199 . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f11ae06b588&gt; . Most of the variables have higher absolute correlation to target than random column, so this heuristic doesn&#39;t provide a good variable selection strategy. Also all variables have very low correlations to target, e.g. 10% at most, so it&#39;s not evident how many top variables to select or what correlation threshold to set. Let&#39;s try taking top 20% most correlated variables and see how the score changes. . top20_cols = cor[cor.index != &#39;target&#39;].sort_values()[-int(cor.shape[0] * .2):].index.tolist() rf_corr = RandomForestClassifier(n_estimators=100, oob_score=True, n_jobs=-1, random_state=42) rf_corr.fit(X_train[top20_cols], y_train) print(f&#39;Reduced number of columns {len(top20_cols)}&#39;) score_and_time(rf_corr, X_test[top20_cols]) . Reduced number of columns 40 Score 0.7037877845503172, predicted in 104 . Ok, so the score decreased slightly, but we reduced input dimension by 80% and prediction time twice! Of course here top 20 was chosen arbitrarily, we could do a GridSearch approach and get multiple scores for different number of top variables and see how does the trade-off landscape between accuracy and complexity looks like. . In general, in-built selection is preferrable, because importances are calculated directly when fitting trees, so it saves computation and additional code lines, but in general it&#39;s good to know alternative methods for later use with algorithms that don&#39;t have in-built feature importance calculation. . Permutation importance . The final technique that I&#39;m going to consider in this post is permutation importance, which as argued (https://scikit-learn.org/stable/auto_examples/inspection/plot_permutation_importance.html#sphx-glr-auto-examples-inspection-plot-permutation-importance-py) is superior to default impurity based feature importance. . Additionally, I&#39;ll wrap feature selection part into Sklearn pipeline, such that it can be integrated into end-to-end solution. . fit base estimator, in next step get fitted estimator and apply feature importances . # scikit-learn==0.22.2 or higher required from sklearn.inspection import permutation_importance from sklearn.base import BaseEstimator, ClassifierMixin class FeatureSelector(BaseEstimator, ClassifierMixin): # This can be tuned to accept kwargs for pi def __init__(self, estimator): self.estimator = estimator def fit(self, X, y=None): self.estimator.fit(X, y) self.important_cols = self._get_important_cols(X, y) self.estimator.fit(X[self.important_cols], y) return self def _get_important_cols(self, X, y): pi = permutation_importance(self.estimator, X, y, n_repeats=1, n_jobs=-1, random_state=42) importances = pd.DataFrame(pi.importances_mean, index=X.columns, columns=[&#39;imp&#39;])[&#39;imp&#39;] return importances[importances &gt; importances[&#39;rand&#39;]].index.tolist() def predict(self, X): return self.estimator.predict(X[self.important_cols]) @property def oob_score_(self): return self.estimator.oob_score_ . from sklearn.pipeline import Pipeline clf = RandomForestClassifier(n_estimators=100, oob_score=True, n_jobs=-1, random_state=42) fs = FeatureSelector(clf) . fs.fit(X_train, y_train) print(f&#39;Number of selected features {len(fs.important_cols)}&#39;) score_and_time(fs, X_test) . Number of selected features 21 Score 0.6743065057843015, predicted in 105 . Conclusion . As you can see using permutation importances didn&#39;t seem to prove improve accuracy. It reduced the number of columns down to 21, which seems a little low. It could be due to correlated inputs, for more info see here: https://scikit-learn.org/stable/auto_examples/inspection/plot_permutation_importance_multicollinear.html#sphx-glr-auto-examples-inspection-plot-permutation-importance-multicollinear-py. Anyway, it was interesting to implement new Scikit Learn methods, although for practicality I would use in-built importances for dimensionality reduction and then use permutation importances or LIME / SHAP for model interpretation. Additionally, it would be worthwile to play around with automated multicollinearity reduction techniques in the future. .",
            "url": "https://marloz.github.io/projects/sklearn/pipeline/feature%20selection/dimensionality%20reduction/2020/04/11/feature-selection.html",
            "relUrl": "/sklearn/pipeline/feature%20selection/dimensionality%20reduction/2020/04/11/feature-selection.html",
            "date": " • Apr 11, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Categorical preprocessing",
            "content": "import pandas as pd import numpy as np . Load and inspect data . The purpose of this notebook is not to get to the leaderboard, but rather explore various categorical preprocessing techniques, while choosing some heuristics for other modelling decisions. . I will examine the following categorical encoding techniques: . one hot | ordinal | target | . df = pd.read_csv(&#39;../input/home-credit-default-risk/application_train.csv&#39;) . df.shape . (307511, 122) . df.dtypes.value_counts() . float64 65 int64 41 object 16 dtype: int64 . df.head() . SK_ID_CURR TARGET NAME_CONTRACT_TYPE CODE_GENDER FLAG_OWN_CAR FLAG_OWN_REALTY CNT_CHILDREN AMT_INCOME_TOTAL AMT_CREDIT AMT_ANNUITY ... FLAG_DOCUMENT_18 FLAG_DOCUMENT_19 FLAG_DOCUMENT_20 FLAG_DOCUMENT_21 AMT_REQ_CREDIT_BUREAU_HOUR AMT_REQ_CREDIT_BUREAU_DAY AMT_REQ_CREDIT_BUREAU_WEEK AMT_REQ_CREDIT_BUREAU_MON AMT_REQ_CREDIT_BUREAU_QRT AMT_REQ_CREDIT_BUREAU_YEAR . 0 100002 | 1 | Cash loans | M | N | Y | 0 | 202500.0 | 406597.5 | 24700.5 | ... | 0 | 0 | 0 | 0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 1.0 | . 1 100003 | 0 | Cash loans | F | N | N | 0 | 270000.0 | 1293502.5 | 35698.5 | ... | 0 | 0 | 0 | 0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 2 100004 | 0 | Revolving loans | M | Y | Y | 0 | 67500.0 | 135000.0 | 6750.0 | ... | 0 | 0 | 0 | 0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 3 100006 | 0 | Cash loans | F | N | Y | 0 | 135000.0 | 312682.5 | 29686.5 | ... | 0 | 0 | 0 | 0 | NaN | NaN | NaN | NaN | NaN | NaN | . 4 100007 | 0 | Cash loans | M | N | Y | 0 | 121500.0 | 513000.0 | 21865.5 | ... | 0 | 0 | 0 | 0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | 0.0 | . 5 rows × 122 columns . import pylab import matplotlib.pyplot as plt def plot_missing_values(df): &quot;&quot;&quot; For each column with missing values plot proportion that is missing.&quot;&quot;&quot; data = [(col, df[col].isnull().sum() / len(df)) for col in df.columns if df[col].isnull().sum() &gt; 0] col_names = [&#39;column&#39;, &#39;percent_missing&#39;] missing_df = pd.DataFrame(data, columns=col_names).sort_values(&#39;percent_missing&#39;) pylab.rcParams[&#39;figure.figsize&#39;] = (15, 8) missing_df.plot(kind=&#39;barh&#39;, x=&#39;column&#39;, y=&#39;percent_missing&#39;); plt.title(&#39;Percent of missing values in colummns&#39;); . plot_missing_values(df) . f&#39;Total missing values: {df.isnull().sum().sum()}&#39; . &#39;Total missing values: 9152465&#39; . df.TARGET.value_counts() . 0 282686 1 24825 Name: TARGET, dtype: int64 . Ok, so it&#39;s not a terribly large dataset, with mixed variable types, considerable amount of missing values and imbalanced target classes. . Sampling . First of all, I&#39;d like to downsample dominant target class to reduce imbalance. Typically, we don&#39;t need 1:1 ratio of positive to negative class, because that will most likely result in considerable information loss, however, I&#39;ll use it here to speed up development. . def downsample_df(df, target_col): positive_class = df[df[target_col] == 1] negative_class = (df[df[target_col] == 0] .sample(n=positive_class.shape[0], random_state=42)) return pd.concat([positive_class, negative_class], axis=0) . sampled_df = downsample_df(df, &#39;TARGET&#39;) . print(sampled_df.shape) sampled_df.TARGET.value_counts() . (49650, 122) . 1 24825 0 24825 Name: TARGET, dtype: int64 . Split train and validation sets . from sklearn.model_selection import train_test_split . y = sampled_df.TARGET X = sampled_df.drop(&#39;TARGET&#39;, axis=1) . X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=.2, random_state=42) X_train.shape, X_valid.shape, y_train.shape, y_valid.shape . ((39720, 121), (9930, 121), (39720,), (9930,)) . Establish baseline . Any fruitful experimentation must begin by first setting a reasonable baseline result and then trying to beat it. So let&#39;s contruct a basic pipeline that provides us the benchmark, while also simplifying experimentation. . Preprocessing . Before we can get our first score on the validation set, we need to make sure that the data is in the right format to be ingested by the model, i.e. all columns should be numericalized and have no missing values. . For dealing with missing values let&#39;s just simply fill categorical NAs with &#39;none&#39; value and numericals with median. More elaborate schemes for missing value imputation are not in the scope of this notebook and can be found here: https://marloz.github.io/projects/sklearn/pipeline/missing/preprocessing/2020/03/20/sklearn-pipelines-missing-values.html . For conversion of categoricals into numerics, I&#39;ll use OneHotEncoder first, as it has in-built functionality of handling unseen classes, when applying pipeline to out-of-sample data. . def get_categorical_columns(X): return [col for col in X.columns if X[col].dtypes == &#39;O&#39;] . from sklearn.compose import ColumnTransformer from sklearn.impute import SimpleImputer from sklearn.pipeline import Pipeline from sklearn.preprocessing import OneHotEncoder cat_imputer = SimpleImputer(strategy=&#39;constant&#39;, fill_value=&#39;none&#39;) ohe = OneHotEncoder(sparse=False, handle_unknown=&#39;ignore&#39;) cat_processor = Pipeline([ (&#39;imputer&#39;, cat_imputer), (&#39;encoder&#39;, ohe) ]) num_imputer = SimpleImputer(strategy=&#39;median&#39;) preprocessor = ColumnTransformer([(&#39;categoricals&#39;, cat_processor, get_categorical_columns)], remainder=num_imputer) . _ = pd.DataFrame(preprocessor.fit_transform(X_train)) print(f&#39;Number of missing values after imputatation {_.isnull().sum().sum()}&#39;) print(f&#39;All data types are numeric: {sum(_.dtypes == float) == _.shape[1]}&#39;) . Number of missing values after imputatation 0 All data types are numeric: True . Model . For modelling let&#39;s bring out yer good &#39;ol RandomForestClassifier, as it&#39;s very widely used, requires little preprocessing and performs well with very little tuning, which is just perfect for such exploration. . from sklearn.ensemble import RandomForestClassifier rf = RandomForestClassifier(random_state=42, n_jobs=-1) pipeline = Pipeline([ (&#39;preprocessor&#39;, preprocessor), (&#39;classifier&#39;, rf) ]) . pipeline.fit(X_train, y_train) pipeline.score(X_valid, y_valid) . 0.6756294058408862 . Okay, so this gives us a plain vanilla pipeline score, let&#39;s see if we can squeeze out some improvement! . # Combine rare categories | . One of the simpler techniques that we can start with is combining rare classes, to avoid creating a bunch of sparse OHE columns, which doesn&#39;t help the model (for more see here https://towardsdatascience.com/one-hot-encoding-is-making-your-tree-based-ensembles-worse-heres-why-d64b282b5769) . Let&#39;s first check how many variables have rare categories as this may not be issue at all in this case. There are only few variables that have categories with counts &lt; 100, so probably this technique will not add much. . min_count_categories = [(col, X_train[col].value_counts().min()) for col in get_categorical_columns(X_train)] pd.DataFrame(min_count_categories).set_index(0)[1].sort_values().plot(kind=&#39;bar&#39;) plt.yscale(&#39;log&#39;) . Also it&#39;s worth doing cardinality check, as noted in the beginning of the section, categorical variables with many levels can cause issues for tree based algorithms, especially when One Hot Encoding is applied. There&#39;s only a single variable, which has close to 60 categories, which is not too bad, so One Hot Encoding might actually be quite suitable in this case. . unique_counts = [(col, X_train[col].nunique()) for col in get_categorical_columns(X_train)] pd.DataFrame(unique_counts).set_index(0)[1].sort_values().plot(kind=&#39;bar&#39;) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7f9e2978b518&gt; . Let&#39;s still apply rare category combiner, just to see how it works and have it in the toolbox. . def combine_low_count_classes(X, threshold=100): &quot;&quot;&quot; This is a transformer function inteded to be used on categorical columns without any missing values. It loops through variables and checks for categories that have related counts lower than specified threshold. Then it combines all these low count categories into single &#39;other&#39; category, along with first category above the threshold&quot;&quot;&quot; X = pd.DataFrame(X) for column in X.columns: frequencies = X[column].value_counts() if frequencies.min() &lt; threshold: lower_bound = frequencies[frequencies &gt;= threshold].min() mask = frequencies[frequencies &lt;= lower_bound].index replace_dict = dict.fromkeys(mask, &#39;other&#39;) X[column] = X[column].replace(replace_dict) return X.values . from sklearn.preprocessing import FunctionTransformer combiner = FunctionTransformer(combine_low_count_classes) . cat_processor = Pipeline([ (&#39;imputer&#39;, cat_imputer), (&#39;combiner&#39;, combiner), (&#39;encoder&#39;, ohe) ]) pipeline.set_params(**{&#39;preprocessor__categoricals&#39;: cat_processor}); . pipeline.fit(X_train, y_train) pipeline.score(X_valid, y_valid) . 0.6717019133937563 . Ok, this actually made the score slightly worse. As argued above, rare categories and high cardinality is probably not the main concern for this dataset, so this technique removes more information than noise. . Ordinal encoding . Ordinal encoder doesn&#39;t handle unseen data, so the pipeline will fail on validation set. To accomodate for this we need to replace new categories in validation set with some value and append this replaced value to the known classes of fitted encoder (inspired by https://stackoverflow.com/questions/40321232/handling-unknown-values-for-label-encoding) . from sklearn.base import BaseEstimator, TransformerMixin from sklearn.preprocessing import OrdinalEncoder class CustomLabelEncoder(BaseEstimator, TransformerMixin): &quot;&quot;&quot; Fits sklearn&#39;s OrdinalEncoder (OE) to categorical columns without missing values. Loops through columns and checks if each category is in within fitted OE categories. If not, new category is assigned &#39;new_category&#39; value and appended to OE categories, such that OE can be applied to unseen data.&quot;&quot;&quot; def fit(self, X, y=None): self.oe = OrdinalEncoder() self.oe.fit(X) return self def transform(self, X): for col_idx in range(X.shape[1]): X[:, col_idx] = self.replace_new_categories(X[:, col_idx], self.oe.categories_[col_idx]) self.oe.categories_[col_idx] = np.append(self.oe.categories_[col_idx], &#39;new_category&#39;) return self.oe.transform(X) def replace_new_categories(self, col, categories): return pd.Series(col).map(lambda current_category: &#39;new_category&#39; if current_category not in categories else current_category).values . cat_processor = Pipeline([ (&#39;imputer&#39;, cat_imputer), (&#39;encoder&#39;, CustomLabelEncoder()) ]) pipeline.set_params(**{&#39;preprocessor__categoricals&#39;: cat_processor}); . pipeline.fit(X_train, y_train) pipeline.score(X_valid, y_valid) . 0.6748237663645519 . No improvement from the benchmark, but scores are pretty close. . Target encoding . Another popular way of dealing with categoricals is Target Encoding, which basically includes information about the mean of the dependent variable as it relates to particular category. We have to be careful though not to leak data from validation set and also consider the number of values per category as some small groups can introduce noise (a concept akin to combining rare classes discussed before). See more here (https://medium.com/@venkatasai.katuru/target-encoding-done-the-right-way-b6391e66c19f) . class TargetEncoder(BaseEstimator, TransformerMixin): &quot;&quot;&quot; Calculates global mean on train set, then proceeds with creating encoding dictionary for each column, which contains smoothed target variable mean for each category. The smoothing parameter can be changed upon initiation of the class and represents number of values per category, i.e. for rare categories global mean has more weight. Transform part uses same trick as customized Ordinal Encoder used above - checking for new categories in data and assigning them global mean. &quot;&quot;&quot; def __init__(self, smooth_weight=100): self.smooth_weight = smooth_weight def fit(self, X, y): self.global_mean = np.mean(y) self.enc_dict = self.create_encoding_dict(X, y) return self def create_encoding_dict(self, X, y): enc_dict = {} for col_idx in range(X.shape[1]): enc_dict[col_idx] = self.get_smooth_means_for_col(X[:, col_idx], y) return enc_dict def get_smooth_means_for_col(self, col, y): smooth_mean_agg = (lambda x: (x[&#39;count&#39;] * x[&#39;mean&#39;] + self.smooth_weight * self.global_mean) / (x[&#39;count&#39;] + self.smooth_weight)) col_y_concat = pd.concat([pd.Series(col, name=&#39;col&#39;), pd.Series(y, name=&#39;target&#39;)], axis=1) return (col_y_concat.groupby(&#39;col&#39;)[&#39;target&#39;].agg([&#39;count&#39;, &#39;mean&#39;]) .assign(smooth_mean=smooth_mean_agg))[&#39;smooth_mean&#39;].to_dict() def transform(self, X): for col_idx in range(X.shape[1]): X[:, col_idx] = self.replace_new_categories(X[:, col_idx], self.enc_dict[col_idx].keys()) X[:, col_idx] = (pd.Series(X[:, col_idx]).map(self.enc_dict[col_idx]) .fillna(self.global_mean).values) return X def replace_new_categories(self, col, categories): return pd.Series(col).map(lambda current_category: &#39;new_category&#39; if current_category not in categories else current_category).values . cat_processor = Pipeline([ (&#39;imputer&#39;, cat_imputer), (&#39;encoder&#39;, TargetEncoder()) ]) pipeline.set_params(**{&#39;preprocessor__categoricals&#39;: cat_processor}); . pipeline.fit(X_train, y_train) pipeline.score(X_valid, y_valid) . 0.6780463242698892 . Slight improvement from benchmark, which is always nice. . Thanks for reading, comments are appreciated! .",
            "url": "https://marloz.github.io/projects/sklearn/pipeline/preprocessing/categorical/2020/04/10/categorical-preprocessing-techniques.html",
            "relUrl": "/sklearn/pipeline/preprocessing/categorical/2020/04/10/categorical-preprocessing-techniques.html",
            "date": " • Apr 10, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "“I interface with my database, my database is in cyberspace, so I’m interactive, I’m hyperactive and from time to time I’m radioactive.” . George Carlin | . Pretty much sums it up. .",
          "url": "https://marloz.github.io/projects/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}